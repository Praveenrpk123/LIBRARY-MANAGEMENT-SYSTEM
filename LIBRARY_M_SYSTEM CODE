
from datetime import datetime   #These module provide a number of functions to deal with dates, times and time intervals
import os                       #os module provides functions for interacting in Os system. 




class Library_management_system:
    """This class is used to store the records of the library
    whereas it has four different Module,They are
    1.Display Books
    2.Issue Books
    3.Return Books
    4.Add Books
    """
    def __init__(self,List_of_Books,Library_name):      #initialising the Variables
        self.List_of_Books = List_of_Books              #Here we Provides the List of Books title which we stored in our machine
        self.Library_name = Library_name                #Here we provide the name of the library
        self.books_dict = {}                            #this dict helps to store our Variable and act as a Database
        Id = 101                                        #Initial Id Position Is 101
        
        #Here With function is used to close the file when everything is done
        #Open() will open the file as LoB
        
        with open(self.List_of_Books,) as LoB:          
            content = LoB.readlines()                   #readlines will read the file line by line and add it to content.
        for line in content:
            self.books_dict.update({str(Id):{'Books_Title':line.replace('\n',''),'Buyer_Name':'',"Issue_date":"","Status":"Available"}})
            Id+=1
#------------------------------------------------------------------------------------------------------------------------------        
#------------------------------------------------------------------------------------------------------------------------------        
    
    def Display_Books(self):
        print("-----------------------{}-----------------------".format(self.Library_name),'\n')
        print("-------------------------{}-------------------------".format('LIST OF BOOKS'),"\n")
        print("ID",'\t',"STATUS",'\t',"TITLE OF BOOKS")
        print("---------------------------------------------------------------")
        for key,value in self.books_dict.items():
            print(int(key),'\t','[',value.get("Status"),']','\t',value.get('Books_Title'))
            
            
    def Issue_Books(self):
        books_id = input('Enter Books ID: ')
        current_date = datetime.datetime.now().strftime('%Y-%B-%d <> %H:%M:%S')
        if books_id in self.books_dict.keys():
            if not self.books_dict[books_id]['Status'] == 'Available':
                print("The Book You Searching is already issued to",self.books_dict[books_id]['Buyer_Name'],'on',self.books_dict[books_id]['Issue_date'])
                return self.Issue_Books()
            elif self.books_dict[books_id]['Status'] == 'Available':
                print('The Book is Available.')
                name = input('Enter Name:')
                self.books_dict[books_id]['Buyer_Name'] = name
                self.books_dict[books_id]['Issue_date'] = current_date
                self.books_dict[books_id]['Status'] = ' Already Issued'
                print(self.books_dict[books_id]['Books_Title'],"Book is Issued to You Successfully to",self.books_dict['Buyer_Name'].upper(),"at",self.books_dict['Issue_date'])
                
        else:
            print("The ID you are searching is Not Found")
            return self.Issue_Books()
        
    def Add_Books(self):
        new_books = input('Enter New Book Title:')
        new_books = new_books.upper()
        if new_books == '':
            return self.Add_Books()
        elif len(new_books) >=50:
            print("The Length of Title Shouldn't Exceed more than 50 characters.")
            return self.Add_Books
        else:
            with open(self.List_of_Books,'a') as Lob:
                Lob.writelines(f"{new_books}\n")
                self.books_dict.update({str(int(max(self.books_dict))+1):{'Books_Title':new_books,'Buyer_Name':'',"Issue_date":"","Status":"Available"}})
                print("Book is added successfully")             
            
            
    def Return_Books(self):
        books_id = input("Enter the Id:")
        if books_id in self.books_dict.keys():
            if self.books_dict[books_id]['Status'] == "Available":
                print("Book is Already available")
                return self.Return_Books()
            elif not self.books_dict[books_id]['Status'] == "Available":
                self.books_dict[books_id]['Buyer_Name'] == ""
                self.books_dict[books_id]['Issue_date'] == ""
                self.books_dict[books_id]['Status'] == "Available"
                print("Book is Returned")
        else:
            print("Enter a Valid Book ID")
            
            
try:
    lms= Library_management_system('l1o2b3','Praveen\'s')
    Key_list = {'D':'Display_Books','I':'Issue_Books','A':'Add_Books','R':'Return_Books','Q':'Quit'}
    key_Press = False
    while not(key_Press == 'Q'):
        print(f'\n---------------WELCOME TO {lms.Library_name} LIBRARY------------------\n')
        for key,value in Key_list.items():
            print('Press',key,'To',value)
        key_Press = input("Press Key:").upper()
        if key_Press == 'D':
            print('-----Current Selction is Display Books-----\n')
            lms.Display_Books()
        elif key_Press == 'I':
            print('-----Current Selction is Issue Books-----\n')
            lms.Issue_Books()
        elif key_Press == 'A':
            print("-----Current Selction is Add Books----- ")
            lms.Add_Books()
        elif key_Press == 'R':
            print("-----Current Selction is Return Books----- ")
            lms.Return_Books()
        elif key_Press == 'Q':
            print("Thank You For Visiting")
            break
        else:
            continue
except Exception as e:
    print("wrong input")

                
